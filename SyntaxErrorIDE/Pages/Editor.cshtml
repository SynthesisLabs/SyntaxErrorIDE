@page
@model SyntaxErrorIDE.Pages.Editor
@{
    ViewData["Title"] = "Syntax Error IDE";
}
<!DOCTYPE html>
<html lang="nl">
<head>
    <title>Syntax Error IDE</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
<main class="container mx-auto px-4">
    <h1 class="text-2xl font-bold my-4">Syntax Error IDE</h1>

    <div class="p-3 bg-gray-100 border border-gray-300 rounded mb-3">
        <div class="flex flex-col md:flex-row md:items-center mb-3">
            <input type="text" id="github-url" placeholder="GitHub repo URL (bijv. gebruiker/repo)"
                   class="px-2 py-1 mr-3 w-full md:w-64 border border-gray-300 rounded mb-2 md:mb-0"/>

            <button id="load-repo-btn"
                    class="mr-3 px-3 py-1 bg-blue-600 text-white border-none rounded cursor-pointer mb-2 md:mb-0">
                Repository laden
            </button>

            <div class="flex-grow"></div>

            <button id="save-file-btn" class="px-3 py-1 bg-green-600 text-white border-none rounded cursor-pointer"
                    disabled>
                Bestand opslaan
            </button>
        </div>

        <div class="flex flex-col md:flex-row">
            <div id="repo-browser"
                 class="w-full md:w-64 bg-white border border-gray-300 rounded mr-0 md:mr-3 mb-3 md:mb-0">
                <div class="p-2 bg-gray-200 border-b border-gray-300 font-semibold">Repository Browser</div>
                <div id="file-explorer" class="h-48 overflow-y-auto p-1">
                    <div class="text-gray-500 text-center p-4">Geen repository geladen</div>
                </div>
            </div>

            <div id="path-navigator" class="flex-grow bg-white border border-gray-300 rounded">
                <div class="p-2 bg-gray-200 border-b border-gray-300 font-semibold flex items-center">
                    <span>Pad: </span>
                    <div id="breadcrumb" class="ml-2 flex-grow overflow-x-auto whitespace-nowrap">
                        <span class="text-gray-500">Geen bestand geselecteerd</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div id="status-bar" class="mt-2 p-2 text-sm text-gray-600 min-h-8 bg-gray-100 rounded"></div>

    <div class="flex flex-row">
        <div class="flex font-mono text-sm h-[65vh] border border-gray-300 w-full rounded">
            <div id="line-numbers"
                 class="w-10 bg-gray-100 text-right p-1 pb-5 overflow-y-hidden select-none leading-6 whitespace-pre">
                1
            </div>
            <textarea id="code-editor" spellcheck="false"
                      class="flex-1 p-1 resize-none border-none outline-none overflow-auto leading-6 whitespace-pre break-words">
            </textarea>
        </div>
    </div>
</main>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const editor = document.getElementById('code-editor');
        const lineNumbers = document.getElementById('line-numbers');
        const fileExplorer = document.getElementById('file-explorer');
        const loadRepoBtn = document.getElementById('load-repo-btn');
        const saveFileBtn = document.getElementById('save-file-btn');
        const githubUrlInput = document.getElementById('github-url');
        const statusBar = document.getElementById('status-bar');
        const breadcrumb = document.getElementById('breadcrumb');

        let currentRepo = {
            owner: null,
            repo: null,
            path: "",
            currentFile: null,
            fileSha: null
        };

        function updateStatus(message, isError = false) {
            statusBar.textContent = message;
            statusBar.className = `mt-2 p-2 text-sm min-h-8 rounded ${isError ? 'text-red-600 bg-red-50' : 'text-gray-600 bg-gray-100'}`;

            // Auto-clear success messages after 3 seconds
            if (!isError) {
                setTimeout(() => {
                    if (statusBar.textContent === message) {
                        statusBar.textContent = '';
                    }
                }, 5000);
            }
        }

        function updateLineNumbers() {
            const lines = editor.value.split('\n').length;
            let numbers = '';
            for (let i = 1; i <= lines; i++) {
                numbers += i + '\n';
            }
            lineNumbers.innerText = numbers;
        }

        function syncScroll() {
            lineNumbers.scrollTop = editor.scrollTop;
        }

        function updateBreadcrumb(path) {
            if (!path) {
                breadcrumb.innerHTML = '<span class="text-gray-500">Geen bestand geselecteerd</span>';
                return;
            }

            const segments = path.split('/');
            breadcrumb.innerHTML = '';

            // Add repo info
            const repoSpan = document.createElement('span');
            repoSpan.className = 'text-blue-600 hover:underline cursor-pointer mr-1';
            repoSpan.textContent = `${currentRepo.owner}/${currentRepo.repo}`;
            repoSpan.addEventListener('click', () => {
                loadDirectoryContents('');
            });
            breadcrumb.appendChild(repoSpan);

            // Add separator
            if (segments.length > 0 && segments[0] !== '') {
                const separator = document.createElement('span');
                separator.textContent = ' / ';
                separator.className = 'text-gray-500 mx-1';
                breadcrumb.appendChild(separator);
            }

            // Add path segments as clickable breadcrumbs
            let currentPath = '';
            segments.forEach((segment, index) => {
                if (segment === '') return;

                currentPath += (currentPath ? '/' : '') + segment;

                const segmentSpan = document.createElement('span');

                if (index < segments.length - 1) {
                    // Directory
                    segmentSpan.className = 'text-blue-600 hover:underline cursor-pointer';
                    segmentSpan.textContent = segment;

                    const pathToLoad = currentPath;
                    segmentSpan.addEventListener('click', () => {
                        loadDirectoryContents(pathToLoad);
                    });
                } else {
                    // Current file
                    segmentSpan.className = 'font-medium';
                    segmentSpan.textContent = segment;
                }

                breadcrumb.appendChild(segmentSpan);

                // Add separator except for last item
                if (index < segments.length - 1) {
                    const separator = document.createElement('span');
                    separator.textContent = ' / ';
                    separator.className = 'text-gray-500 mx-1';
                    breadcrumb.appendChild(separator);
                }
            });
        }

        editor.addEventListener('input', () => {
            updateLineNumbers();
            // Enable save button when changes are made
            if (currentRepo.currentFile) {
                saveFileBtn.disabled = false;
            }
        });

        editor.addEventListener('scroll', syncScroll);

        loadRepoBtn.addEventListener('click', loadRepo);
        saveFileBtn.addEventListener('click', saveFile);

        githubUrlInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') loadRepo();
        });

        async function loadRepo() {
            const url = githubUrlInput.value.trim();
            if (!url) {
                updateStatus('Voer een GitHub repo URL in (gebruiker/repo of volledige URL)', true);
                return;
            }

            // Parse GitHub URL or repo format (user/repo)
            const repoInfo = parseGitHubUrl(url);
            if (!repoInfo) {
                updateStatus('Ongeldige GitHub URL. Gebruik formaat: gebruiker/repo of https://github.com/gebruiker/repo', true);
                return;
            }

            currentRepo.owner = repoInfo.owner;
            currentRepo.repo = repoInfo.repo;
            currentRepo.path = "";
            currentRepo.currentFile = null;
            currentRepo.fileSha = null;

            updateStatus(`Repository laden: ${repoInfo.owner}/${repoInfo.repo}...`);
            saveFileBtn.disabled = true;
            editor.value = '';
            updateLineNumbers();
            updateBreadcrumb('');

            try {
                await loadDirectoryContents('');
            } catch (error) {
                updateStatus(`Fout bij laden repository: ${error.message}`, true);
            }
        }

        async function loadDirectoryContents(path) {
            updateStatus(`Map laden: ${path || 'hoofdmap'}...`);
            currentRepo.path = path;
            currentRepo.currentFile = null;
            currentRepo.fileSha = null;

            try {
                const response = await fetch(
                    `/api/GitHub/repo/${currentRepo.owner}/${currentRepo.repo}/contents/${path}`
                );

                if (!response.ok) {
                    const error = await response.text();
                    throw new Error(`GitHub API error: ${response.status} - ${error}`);
                }

                const contents = await response.json();

                // Clear editor when loading a directory
                editor.value = '';
                updateLineNumbers();
                saveFileBtn.disabled = true;
                updateBreadcrumb(path);

                showFilesInExplorer(contents, path);
            } catch (error) {
                updateStatus(`Fout bij laden map: ${error.message}`, true);
            }
        }

        function showFilesInExplorer(contents, path) {
            fileExplorer.innerHTML = "";

            if (!Array.isArray(contents)) {
                updateStatus("Ongeldig antwoord van GitHub API", true);
                return;
            }

            // Sort: directories first, then files alphabetically
            contents.sort((a, b) => {
                if (a.type !== b.type) {
                    return a.type === 'dir' ? -1 : 1;
                }
                return a.name.localeCompare(b.name);
            });

            // Add go up link if in subdirectory
            if (path && path !== '') {
                const upDir = document.createElement("div");
                upDir.className = "file-item p-1 hover:bg-gray-200 cursor-pointer flex items-center";

                const iconSpan = document.createElement("span");
                iconSpan.textContent = '📁';
                iconSpan.className = "mr-1";
                upDir.appendChild(iconSpan);

                const textSpan = document.createElement("span");
                textSpan.textContent = "..";
                textSpan.className = "font-medium";
                upDir.appendChild(textSpan);

                upDir.onclick = () => {
                    // Go up one directory
                    const parentPath = path.includes('/')
                        ? path.substring(0, path.lastIndexOf('/'))
                        : '';
                    loadDirectoryContents(parentPath);
                };
                fileExplorer.appendChild(upDir);
            }

            // Add all contents
            contents.forEach(item => {
                const div = document.createElement("div");
                div.className = "file-item p-1 hover:bg-gray-200 cursor-pointer flex items-center";

                // Icon based on type
                const iconSpan = document.createElement("span");
                if (item.type === 'dir') {
                    iconSpan.textContent = '📁';
                } else {
                    // File icon based on extension
                    const extension = item.name.split('.').pop().toLowerCase();
                    let icon = '📄';
                    if (['js', 'ts'].includes(extension)) icon = '📜';
                    if (['html', 'htm'].includes(extension)) icon = '🌐';
                    if (['css', 'scss', 'sass'].includes(extension)) icon = '🎨';
                    if (['json', 'xml', 'yaml', 'yml'].includes(extension)) icon = '📋';
                    if (['png', 'jpg', 'jpeg', 'gif', 'svg'].includes(extension)) icon = '🖼️';
                    if (['md', 'markdown'].includes(extension)) icon = '📝';
                    if (['cs', 'fs', 'vb'].includes(extension)) icon = '🔷';
                    if (['java', 'kotlin'].includes(extension)) icon = '☕';
                    if (['py', 'pyc'].includes(extension)) icon = '🐍';
                    if (['rb'].includes(extension)) icon = '💎';
                    if (['php'].includes(extension)) icon = '🐘';
                    iconSpan.textContent = icon;
                }
                iconSpan.className = "mr-1";
                div.appendChild(iconSpan);

                const textSpan = document.createElement("span");
                textSpan.textContent = item.name;
                textSpan.className = "truncate";
                div.appendChild(textSpan);

                div.onclick = async () => {
                    try {
                        if (item.type === 'dir') {
                            // Navigate to directory
                            const newPath = path ? `${path}/${item.name}` : item.name;
                            loadDirectoryContents(newPath);
                        } else {
                            // Load file content
                            await loadFile(item);
                        }
                    } catch (error) {
                        updateStatus(`Fout: ${error.message}`, true);
                    }
                };
                fileExplorer.appendChild(div);
            });

            updateStatus(`${contents.length} items gevonden in: ${path || 'hoofdmap'}`);
        }

        async function loadFile(fileInfo) {
            try {
                saveFileBtn.disabled = true;
                updateStatus(`Bestand laden: ${fileInfo.name}...`);

                const filePath = fileInfo.name;
            
                
                const url = `https://api.github.com/repos/${currentRepo.owner}/${currentRepo.repo}/contents/${filePath}`;

const response = await fetch(url);

if (!response.ok) {
  throw new Error(`Fout bij laden bestand: ${response.status}`);
}

                const fileData = await response.json();

                if (!fileData.content) {
                    throw new Error("Bestandsinhoud niet gevonden");
                }

                editor.value = fileData.content;
                updateLineNumbers();

                currentRepo.currentFile = filePath;
                currentRepo.fileSha = fileData.sha;

                saveFileBtn.disabled = false;
                updateBreadcrumb(filePath);
                updateStatus(`Bestand geladen: ${filePath}`);

                // Highlight active file
                document.querySelectorAll('.file-item').forEach(item => {
                    item.classList.remove('bg-blue-100');
                    if (item.querySelector('span:last-child').textContent === fileInfo.name) {
                        item.classList.add('bg-blue-100');
                    }
                });
            } catch (error) {
                updateStatus(`Fout bij laden bestand: ${error.message}`, true);
            }
        }

        async function saveFile() {
            if (!currentRepo.currentFile || !currentRepo.fileSha) {
                updateStatus('Geen bestand geselecteerd om op te slaan', true);
                return;
            }

            try {
                updateStatus(`Bestand opslaan: ${currentRepo.currentFile}...`);

                const response = await fetch(
                    `/api/GitHub/save/${currentRepo.owner}/${currentRepo.repo}/${currentRepo.currentFile}`,
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            content: editor.value,
                            sha: currentRepo.fileSha,
                            message: `Update ${currentRepo.currentFile} via Syntax Error IDE`
                        })
                    }
                );

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`GitHub API error (${response.status}): ${errorText}`);
                }

                // Update file SHA from response
                const responseData = await response.json();
                if (responseData.content && responseData.content.sha) {
                    currentRepo.fileSha = responseData.content.sha;
                }

                updateStatus(`Bestand opgeslagen: ${currentRepo.currentFile}`);
                saveFileBtn.disabled = true;
            } catch (error) {
                updateStatus(`Fout bij opslaan: ${error.message}`, true);
            }
        }

        function parseGitHubUrl(input) {
            // Handle raw repo format: username/repo
            if (input.match(/^[a-zA-Z0-9-_.]+\/[a-zA-Z0-9-_.]+$/)) {
                const [owner, repo] = input.split('/');
                return {owner, repo};
            }

            // Handle GitHub URLs
            try {
                const url = new URL(input);
                if (!url.hostname.includes('github.com')) {
                    return null;
                }

                const pathParts = url.pathname.split('/').filter(Boolean);
                if (pathParts.length >= 2) {
                    return {
                        owner: pathParts[0],
                        repo: pathParts[1].replace('.git', '')
                    };
                }
            } catch (e) {
                // Not a valid URL
            }

            return null;
        }

        // Tab key handling
        editor.addEventListener('keydown', function (e) {
            if (e.key === 'Tab') {
                e.preventDefault();
                const start = this.selectionStart;
                const end = this.selectionEnd;

                // Insert tab at cursor
                this.value = this.value.substring(0, start) + '    ' + this.value.substring(end);

                // Move cursor after tab
                this.selectionStart = this.selectionEnd = start + 4;
            }
        });

        // Initialize
        updateLineNumbers();
        updateStatus('Klaar om te beginnen. Laad een repository om te starten.');
    });
</script>
</body>
</html>