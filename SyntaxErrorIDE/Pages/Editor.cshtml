@page
@model SyntaxErrorIDE.Pages.Editor

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="nl">
<head>
    <title>Syntax Error IDE</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
<main>
    <div class="p-[10px] bg-[#f5f5f5] border border-[#ddd] mb-[10px]">
        <div id="file-explorer" class="mb-[10px] max-h-[200px] overflow-y-auto">
        </div>

        <button id="save-btn" class="mr-[10px] px-[10px] py-[5px] text-white border-none cursor-pointer">
            Opslaan
        </button>

        <input type="text" id="new-filename" placeholder="Nieuw bestandsnaam"
               class="px-[5px] mr-[10px] w-[200px]" />

        <button id="create-btn" class="mr-[10px] px-[10px] py-[5px] text-white border-none cursor-pointer">
            Nieuw bestand
        </button>
    </div>
    <div class="flex flex-row">
        <div class="filemap w-[20%]"></div>
        <div class="flex font-mono text-[14px] h-[80vh] my-[20px] border border-[#ccc] w-[100%]">
            <div id="line-numbers"
                 class="w-[30px] bg-[#f0f0f0] text-right p-[5px] pb-[20px] overflow-y-hidden select-none leading-[1.5rem] whitespace-pre">
                1
            </div>
            <textarea id="code-editor" spellcheck="false"
                      class="flex-1 p-[5px] resize-none border-none outline-none overflow-x-scroll leading-[1.5rem] whitespace-pre break-words">
            </textarea>
        </div>
    </div>

</main>
<script src="js/editor/lineNumbers.js"></script>
<script src="js/editor/repo.js"></script>
<script>
    document.getElementById("load-repo-btn").addEventListener("click", async () => {
        const url = document.getElementById("github-url").value.trim();
        if (!url) {
            updateStatus("Voer een GitHub URL in");
            return;
        }

        updateStatus("Repository laden...");

        try {
            const response = await fetch("/Editor/DownloadRepo", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ githubUrl: url })
            });

            if (response.ok) {
                const files = await response.json();
                showFilesInExplorer(files);
                updateStatus(`Repository geladen: ${files.length} bestanden`);
            } else {
                const error = await response.text();
                updateStatus(`Fout: ${error}`, true);
            }
        } catch (error) {
            updateStatus(`Netwerkfout: ${error.message}`, true);
        }
    });

    function showFilesInExplorer(files) {
        const explorer = document.getElementById("file-explorer");
        explorer.innerHTML = "";

        files.forEach(file => {
            const div = document.createElement("div");
            div.className = "file-item";
            div.textContent = file;
            div.onclick = async () => {
                try {
                    updateStatus(`Bestand laden: ${file}`);
                    const res = await fetch(`/Editor/GetFileContent?file=${encodeURIComponent(file)}`);
                    if (res.ok) {
                        document.getElementById("code-editor").value = await res.text();
                        updateLineNumbers();
                        updateStatus(`Geladen: ${file}`);
                    } else {
                        updateStatus(`Fout bij laden bestand: ${file}`, true);
                    }
                } catch (error) {
                    updateStatus(`Fout: ${error.message}`, true);
                }
            };
            explorer.appendChild(div);
        });
    }

    function updateStatus(message, isError = false) {
        const statusBar = document.getElementById("status-bar");
        statusBar.textContent = message;
        statusBar.style.color = isError ? "#dc3545" : "#495057";
    }
</script>
</body>
</html>
